#+STARTUP: showeverything
* Intro
  This is my master .org config file

* Configuration
** Package management
*** Setup package archives
   #+begin_src emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)
     (setq package-archives '(("melpa"     . "https://melpa.org/packages/")
			      ("org"       . "http://orgmode.org/elpa/")
			      ("gnu"       . "http://elpa.gnu.org/packages/")))
     (package-initialize)		    
   #+end_src

*** Configure use-package
    #+begin_src emacs-lisp
      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

      (eval-when-compile
	(require 'use-package))
      (require 'use-package-ensure)
      (setq use-package-always-ensure t)
    #+end_src
** General settings
*** Core
    Move customizations into a separate file, to keep init.el tidy.
    #+begin_src emacs-lisp
      (setq custom-file "~/.emacs.d/custom.el")
      (unless (file-exists-p custom-file)
	(with-temp-buffer
	  (write-file custom-file)))
      (load custom-file)
    #+end_src
    Disable any auto-saving and backup files
    #+begin_src emacs-lisp
      (setq make-backup-files nil)
      (setq auto-save-default nil)
    #+end_src
    No yes-or-no questions
    #+begin_src emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src
    Do not re-center point while scrolling
    #+begin_src emacs-lisp
      (setq scroll-conservatively 100)
    #+end_src
    Do not emit an audible bell
    #+begin_src emacs-lisp
      (setq ring-bell-function 'ignore)
    #+end_src
    Show current line of cursor (only in GUI-mode)
    #+begin_src emacs-lisp
      (when window-system
	(global-hl-line-mode t))
    #+end_src
    Highlight cursor when switching buffers
    #+begin_src emacs-lisp
      (use-package beacon
	:init
	(beacon-mode 1)
	:config
	(setq beacon-blink-when-buffer-changes t)
	(setq beacon-blink-when-window-changes t)
	(setq beacon-blink-when-point-moves-horizontally nil)
	(setq beacon-blink-when-point-moves-vertically nil)
	(setq beacon-blink-duration .2)
	(setq beacon-blink-delay .2)
	(setq beacon-size 20))
    #+end_src
    Prettify symbols
    #+begin_src emacs-lisp
      (when window-system
	(global-prettify-symbols-mode t))
    #+end_src
    Use ibuffer for showing buffer list
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ibuffer)
      (setq ibuffer-expert t)
    #+end_src
    Use avy for fast in-buffer navigation
    #+begin_src emacs-lisp
      (use-package avy
	:bind
	("M-s" . avy-goto-char))
    #+end_src
    Write custom function to improve splitting of buffers
    #+begin_src emacs-lisp
      (defun mngkd/split-window-right-and-follow ()
	(interactive)
	(split-window-right)
	(other-window 1))

      (defun mngkd/split-window-below-and-follow ()
	(interactive)
	(split-window-below)
	(other-window 1))

      (global-set-key (kbd "C-x 2") 'mngkd/split-window-below-and-follow)
      (global-set-key (kbd "C-x 3") 'mngkd/split-window-right-and-follow)
    #+end_src
*** Terminal
    Always use bash as defauhlt terminal
    #+begin_src emacs-lisp
      (defvar mngkd/term-shell "/bin/bash")
      (defadvice ansi-term (before force-bash)
	(interactive (list mngkd/term-shell)))
      (ad-activate 'ansi-term)
    #+end_src
    Use Super-Return to launch a terminal
    #+begin_src emacs-lisp
      (global-set-key (kbd "<s-return>") 'ansi-term)
    #+end_src
*** Visual
     Remove menubar, scrollbar, and more distracting GUI elements
     #+begin_src emacs-lisp
       (setq inhibit-startup-screen t)
       (tool-bar-mode -1)
       (toggle-scroll-bar -1)
       (menu-bar-mode -1)
     #+end_src
     Highlight matching parentheses and only those
     #+begin_src emacs-lisp
       (show-paren-mode 1)
       (setq show-paren-style 'parenthesis)
     #+end_src
**** diminish
     Hide some minor modes to prevent cluttering of modeline
     #+begin_src emacs-lisp
       (use-package diminish
	 :init
	 (diminish 'hungry-delete-mode)
	 (diminish 'beacon-mode)
	 (diminish 'which-key-mode)
	 (diminish 'subword-mode)
	 (diminish 'helm-mode)
	 (diminish 'org-cdlatex-mode))
     #+end_src
**** Electric pairs
     #+begin_src emacs-lisp
       (setq electric-pair-pairs '(
				   (?\( . ?\))
				   (?\[ . ?\])
				   (?\{ . ?\})
				   (?\" . ?\")
				   ))
       (electric-pair-mode t)
     #+end_src
**** Rainbow delimiters
     Display colored delimiters for better perception
     #+begin_src emacs-lisp
       (use-package rainbow-delimiters
	 :hook (prog-mode . rainbow-delimiters-mode))
     #+end_src
**** Rainbow mode
      Use rainbow mode to display hexadecimal values
      #+begin_src emacs-lisp
	(use-package rainbow-mode
	  :init
	  (rainbow-mode 1))
      #+end_src
**** Themeing
     Set the theme, I really like the spacemacs theme
     #+begin_src emacs-lisp
       (use-package spacemacs-common
	 :ensure spacemacs-theme
	 :init
	 (setq spacemacs-theme-org-height nil)
	 :config
	 (load-theme 'spacemacs-dark t))
     #+end_src
     Also use the powerline-based modeline of spacemacs
     #+begin_src emacs-lisp
       (use-package spaceline
	 :init
	 (setq powerline-default-separator 'arrow-fade)
	 :config
	 (require 'spaceline-config)
	 (setq powerline-default-separator 'arrow-fade)
	 (spaceline-spacemacs-theme)
	 (spaceline-helm-mode))
     #+end_src
**** Font
     Use a nice, monospaced font
     #+begin_src emacs-lisp
       (set-face-attribute 'default nil
			   :family "Fira Mono for Powerline"		    
       ;;;                 :family "Droid Sans Mono"
       ;;;                 :family "Inconsolata-g for Powerline"
       ;;;                 :family "Source Code Pro for Powerline"		    
			   :height 110
			   :weight 'normal
			   :width 'normal)
     #+end_src
*** Improvements
**** Kill whole word
     #+begin_src emacs-lisp
       (defun mngkd/kill-whole-word ()
	 (interactive)
	 (backward-word 1)
	 (kill-word 1))
       (global-set-key (kbd "s-d") 'mngkd/kill-whole-word)
     #+end_src
**** Always kill current buffer
     #+begin_src emacs-lisp
       (defun mngkd/kill-current-buffer ()
	 (interactive)
	 (kill-buffer (current-buffer)))
       (global-set-key (kbd "C-x k") 'mngkd/kill-current-buffer)
     #+end_src
**** Hungry delete
     #+begin_src emacs-lisp
       (use-package hungry-delete
	 :config (global-hungry-delete-mode))
     #+end_src
**** Copy whole line
     #+begin_src emacs-lisp
       (defun mngkd/copy-whole-line ()
	 (interactive)
	 (save-excursion
	   (kill-new
	    (buffer-substring
	     (point-at-bol)
	     (point-at-eol)))))
       (global-set-key (kbd "s-l") 'mngkd/copy-whole-line)
     #+end_src
**** Kill all open buffers
     #+begin_src emacs-lisp
       (defun mngkd/kill-all-buffers ()
	 (interactive)
	 (mapc 'kill-buffer (buffer-list)))
       (global-set-key (kbd "C-x K") 'mngkd/kill-all-buffers)
     #+end_src
** Mastering emacs
   Tips and tricks taken from Mickey Petersen's 'Mastering Emacs'

   Sort apropos results by relevancy
   #+begin_src emacs-lisp
     (setq apropos-sort-by-scores t)
   #+end_src

   Enable ido mode and use flex matching
   #+begin_src emacs-lisp
     (ido-mode 0)
     (setq ido-everywhere nil)
     (setq ido-enable-flex-matching nil)
   #+end_src

   Use winner-mode to retrieve past window configurations
   #+begin_src emacs-lisp
     (setq winner-mode t)
   #+end_src

   Use ace-window for really fast window selection
   #+begin_src emacs-lisp
     (use-package ace-window
       :config
       (global-set-key (kbd "M-o") 'ace-window)
       (setq aw-keys '(?n ?r ?t ?d ?u ?i ?a ?e))
       (setq aw-ignore-current t))
   #+end_src

   Use windmove to change windows by S-<arrow> (see [[https://orgmode.org/manual/Conflicts.html][link]] for more information)
   #+begin_src emacs-lisp
     (windmove-default-keybindings)
     ;; Make windmove work in Org mode:
     (add-hook 'org-shiftup-final-hook 'windmove-up)
     (add-hook 'org-shiftleft-final-hook 'windmove-left)
     (add-hook 'org-shiftdown-final-hook 'windmove-down)
     (add-hook 'org-shiftright-final-hook 'windmove-right)
   #+end_src

   Use actual visual lines, not logical lines
   #+begin_src emacs-lisp
     (setq global-visual-line-mode t)
   #+end_src

   Use 'M-i' for 'M-x imenu'
   #+begin_src emacs-lisp
     (global-set-key (kbd "M-i") 'imenu)
   #+end_src

    of 'C-w' to kill whole line, if no region is active
   #+begin_src emacs-lisp
     (use-package whole-line-or-region
       :config
       (whole-line-or-region-global-mode 1))
   #+end_src
   
   Use Hippie Expand for text completion ('M-/')
   #+begin_src emacs-lisp
     (global-set-key [remap dabbrev-expand] 'hippie-expand)
   #+end_src

   Do not use tabs, I want 4 spaces
   #+begin_src emacs-lisp
     (setq indent-tabs-mode nil)
     (setq tab-width 4)
   #+end_src

   If a buffer changed on disk, it should be automatically refreshed
   #+begin_src emacs-lisp
     (global-auto-revert-mode 1)
   #+end_src

   Function to edit current buffer as root user and map it to <f12>
   #+begin_src emacs-lisp
     (defun mngkd/sudo ()
       "Use TRAMP to edit current buffer as root user"
       (interactive)
       (when buffer-file-name
	 (find-alternate-file
	  (concat "/sudo:root@localhost:"
		  buffer-file-name))))
     (global-set-key (kbd "<f12>") 'mngkd/sudo)
   #+end_src

   Enable dired-x by default
   #+begin_src emacs-lisp
     (require 'dired-x)
   #+end_src
** org-mode
   Install latest, stable org-mode
   #+begin_src emacs-lisp
     (use-package org
       :mode (("\\.\\(org\\|org_archive\\)$" . org-mode))
       :ensure org-plus-contrib)
   #+end_src
   Add an easy template for emacs-lisp babel block (see [[https://emacs.stackexchange.com/questions/46795/is-it-possible-to-add-templates-other-than-begin-end-to-org-structure-temp][link]])
   #+begin_src emacs-lisp
     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
   #+end_src
   Use org-bullets for more pleasing headlines
   #+begin_src emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+end_src
*** LaTeX support
    Install CDLaTeX. Also install auctex, CDLaTeX requires texmathp.el
    #+begin_src emacs-lisp
      (use-package auctex
	:defer t)
      (use-package cdlatex)
    #+end_src
    Setup org-mode hook to load cdlatex
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
    #+end_src
** Programming
*** Projectile
    Use projectile for general project management
    #+begin_src emacs-lisp
      (use-package projectile
	:config
	(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
	(projectile-mode +1))

      (projectile-global-mode)
      (setq projectile-completion-system 'helm)

      (use-package helm-projectile)
      (helm-projectile-on)
    #+end_src
*** Magit
    Install magit, the best git integration ever
    #+begin_src emacs-lisp
      (use-package magit
	:config
	(global-set-key (kbd "s-g") 'magit-status))
    #+end_src
*** Debugging
    Install a good debugger
    #+begin_src emacs-lisp
      (use-package realgud)
    #+end_src
*** Subword mode
    Enable subword mode in programming    
    #+begin_src emacs-lisp
      (add-hook 'prog-mode-hook (lambda () (subword-mode 1)))
    #+end_src
*** LSP
    Install lsp-mode
    #+begin_src emacs-lisp
      (use-package lsp-mode
	:commands lsp
	:hook
	(python-mode-hook . lsp))
    #+end_src

    Install lsp-ui for higher level UI modules
    #+begin_src emacs-lisp
      (use-package lsp-ui
	:requires lsp-mode flycheck
	:commands lsp-ui
	:config
	(setq lsp-ui-doc-enable t
	      lsp-ui-doc-use-childframe t
	      lsp-ui-doc-position 'top-edge
	      lsp-ui-doc-include-signature t
	      lsp-ui-sideline-enable nil
	      lsp-ui-flycheck-list-position 'right
	      lsp-ui-flycheck-live-reporting t
	      lsp-ui-peek-enable t
	      lsp-ui-peek-list-width 60
	      lsp-ui-peek-peek-height 25
	      lsp-ui-peek-fontify 'on-demand))
      (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    #+end_src
    
    Add company backend
    #+begin_src emacs-lisp
      (use-package company-lsp
	:commands company-lsp
	:requires company
	:config
	(push 'company-lsp company-backends)
	(setq company-transformers nil
	      company-lsp-async t
	      company-lsp-cache-candidates nil))
    #+end_src
*** Company
    Use company for general completion
    #+begin_src emacs-lisp
      (use-package company
	:config
	(add-hook 'after-init-hook 'global-company-mode))
    #+end_src
    Set delay for company to 0.
    #+begin_src emacs-lisp
      (setq company-idle-delay 0)
    #+end_src
    Need at least 3 characters before company kicks in
    #+begin_src emacs-lisp
      (setq company-minimum-prefix-length 3)
    #+end_src
    Use C-n/p to select entries, instead of M-n/p
    #+begin_src emacs-lisp
      (with-eval-after-load 'company
	(define-key company-active-map (kbd "M-n") nil)
	(define-key company-active-map (kbd "M-p") nil)
	(define-key company-active-map (kbd "C-n") #'company-select-next)
	(define-key company-active-map (kbd "C-p") #'company-select-previous)
	(define-key company-active-map (kbd "SPC") #'company-abort))
    #+end_src
*** CMake
    Setup CMake
    #+begin_src emacs-lisp
      (use-package cmake-mode
	:config
	(setq auto-mode-alist
	      (append
	       '(("CMakeLists\\.txt\\'" . cmake-mode))
	       '(("\\.cmake\\'" . cmake-mode))
	       auto-mode-alist)))
    #+end_src
    Use cmake-company as backend for company
    #+begin_src emacs-lisp
      (defun mngkd/company-cmake-setup ()
	(add-to-list 'company-backends 'company-cmake))
      (add-hook 'cmake-mode-hook 'mngkd/company-cmake-setup)
    #+end_src
*** C++
    Install ccls which does the heavy lifting
    #+begin_src emacs-lisp
      (use-package ccls
	:config
	(setq ccls-executable "/usr/local/bin/ccls")
	(setq lsp-prefer-flymake nil)
	(setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
	:hook ((c-mode c++-mode objc-mode) . (lambda () (require 'ccls) (lsp))))
    #+end_src
*** Python
    # Setup elpy
    # #+begin_src emacs-lisp
    #   (use-package elpy
    # 	:config
    # 	(elpy-enable))
    # #+end_src
    Use EIN to interface with jupyter notebooks
    #+begin_src emacs-lisp
      (use-package ein
	:config
	(require 'ein-notebook)
	(require 'ein-subpackages))
    #+end_src
*** ROS
** Packages
   Which-key for easy exploration
   #+begin_src emacs-lisp
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src   
   Setup ledger
   #+begin_src emacs-lisp
     (use-package ledger-mode
       :mode "\\.ledger\\'"
       :config
       (setq ledger-post-amount-alignment-at :decimal
	     ledger-post-amount-alignment-column 60)
       (use-package flycheck-ledger)
       (add-to-list 'ledger-reports
		    '("cleared_bal" "%(binary) -f %(ledger-file) bal --cleared")))
   #+end_src
*** Helm
    Get helm package
    #+begin_src emacs-lisp
      (use-package helm)
    #+end_src
    Do configuration in the lines below, for easier commentation.
    Most of the config is taken from the excellent [[https://tuhdo.github.io/helm-intro.html][documentation]] of Tuhdo.
 
    Load the necessary modules
    #+begin_src emacs-lisp
      (require 'helm)
      (require 'helm-config)
    #+end_src

    Change the default  helm prefix map, since it is too close to 'C-x C-c'.
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c h") 'helm-command-prefix)
      (global-unset-key (kbd "C-x c"))
    #+end_src
    
    Rebind TAB to persistent action and list actions using C-z.
    TODO: check if TAB -> persistent action makes actual sense
    #+begin_src emacs-lisp
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
      (define-key helm-map (kbd "C-z") 'helm-select-action)
    #+end_src

    Use curl for helm-google-suggest, if available
    #+begin_src emacs-lisp
      (when (executable-find "curl")
	(setq helm-google-suggest-use-curl-p t))
    #+end_src
    
    Open helm buffer inside current window
    #+begin_src emacs-lisp
      (setq helm-split-window-in-side-p t)
    #+end_src

    Search for library in require and declare-function sexp
    #+begin_src emacs-lisp
      (setq helm-ff-search-library-in-sexp t)
    #+end_src

    Scroll other window by 8 lines
    #+begin_src emacs-lisp
      (setq helm-scroll-amount 8)
    #+end_src

    More settings
    #+begin_src emacs-lisp
      (setq helm-ff-file-name-history-use-recentf t
	    helm-echo-input-in-header-line t)
    #+end_src

    Hide minibuffer in helm session if we use the header line as input field
    #+begin_src emacs-lisp
      (defun mngkd/helm-hide-minibuffer-maybe ()
	"Hide minibuffer in Helm session if we use the header line as input field."
	(when (with-helm-buffer helm-echo-input-in-header-line)
	  (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
	    (overlay-put ov 'window (selected-window))
	    (overlay-put ov 'face
			 (let ((bg-color (face-background 'default nil)))
			   `(:background ,bg-color :foreground ,bg-color)))
	    (setq-local cursor-type nil))))

      (add-hook 'helm-minibuffer-set-up-hook
		'mngkd/helm-hide-minibuffer-maybe)
    #+end_src

    Set autoresize of helm
    #+begin_src emacs-lisp
      (setq helm-autoresize-max-height 0
	    helm-autoresize-min-height 25)
      (helm-autoresize-mode 1)
    #+end_src

    Enable helm
    #+begin_src emacs-lisp
      (helm-mode 1)
    #+end_src

    Use helm with M-x and enable fuzzy matching
    #+begin_src emacs-lisp
      (global-set-key (kbd "M-x") 'helm-M-x)
      (setq helm-M-x-fuzzy-match t)
    #+end_src

    Show the helm kill-ring
    #+begin_src emacs-lisp
      (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    #+end_src

    Use helm for switching buffers and enable fuzzy matching
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x b") 'helm-mini)

      (setq helm-buffers-fuzzy-matching t
	    helm-recentf-fuzzy-match t)
    #+end_src

    Helm for find-files
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x C-f") 'helm-find-files)
    #+end_src

    Enable fuzzy matching for helm-semantic-or-imenu
    #+begin_src emacs-lisp
      (setq helm-semantic-fuzzy-match t
	    helm-imenu-fuzzy-match t)
    #+end_src

    Enable man page at point
    #+begin_src emacs-lisp
      (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
    #+end_src

    Enable fuzzy matching also for helm locate
    #+begin_src emacs-lisp
      (setq helm-locate-fuzzy-match t)
    #+end_src

    Set helm-occur to a more convenient keybinding
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c h o") 'helm-occur)
    #+end_src

    Enable fuzzy matching for helm-apropos
    #+begin_src emacs-lisp
      (setq helm-apropos-fuzzy-match t)
    #+end_src

    Fuzzy matching for lisp
    #+begin_src emacs-lisp
      (setq helm-lisp-fuzzy-completion t)
    #+end_src

    Show all mark rings easily
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
    #+end_src

    Setup helm-register
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c h x") 'helm-register)
    #+end_src

    Use helm-google-suggest with a sensible keybinding
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c h g") 'helm-google-suggest)
    #+end_src

    Get instant results of elisp expressions in a helm buffer
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c h M-:") 'helm-eval-expression-with-eldoc)
    #+end_src

    Use helm-eshell
    #+begin_src emacs-lisp
      (require 'helm-eshell)

      (add-hook 'eshell-mode-hook
		#'(lambda ()
		    (define-key eshell-mode-map (kbd "C-c C-l") 'helm-eshell-history)))
    #+end_src

    Set-up history for M-x shell
    #+begin_src emacs-lisp
      (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
    #+end_src

    Use helm for minibuffer history
    #+begin_src emacs-lisp
      (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)
    #+end_src

    Make active keybindings searchable by helm
    #+begin_src emacs-lisp
      (use-package helm-descbinds)
      (helm-descbinds-mode)
    #+end_src
*** dmenu
    Have a emacs internal launcher to start applications
    #+begin_src emacs-lisp
      (use-package dmenu
	:bind
	("s-SPC" . 'dmenu))
    #+end_src
